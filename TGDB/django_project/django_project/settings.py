"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u4k8wwv!toso2_qy76l)^1r9r9%09n3et2=a!4lu%_dt#e&ou$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'cadmin'
]

MIDDLEWARE = [
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'


# Email settings

SERVER_EMAIL = 'infooveriq@gmail.com'
# It specifies the email address which Django will use to send error messages to ADMINS and MANAGERS.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# It specifies the name of the backend to use for sending emails. 'django.core.mail.backends.smtp.EmailBackend' means
# that Django will use SMTP Server to send emails. Django has many other backends. Here are other two commonly used
# backends:
# 1) django.core.mail.backends.filebased.EmailBackend
# 2) django.core.mail.backends.console.EmailBackend

# 'django.core.mail.backends.filebased.EmailBackend' allows us to write the email to a file instead of forwarding it to
#  a SMTP server.

# Similarly, 'django.core.mail.backends.console.EmailBackend' prints the email directly to the console.

EMAIL_HOST = 'smtp.gmail.com'
# It specifies the address of the Email Server or SMTP Server. In this case we are using Gmail SMTP Server i.e
# smtp.gmail.com.
EMAIL_HOST_PASSWORD = 'wordpass'
# Password of the account to defined in the EMAIL_HOST.
EMAIL_HOST_USER = SERVER_EMAIL
#  It specifies the username of the account to use with the host defined in EMAIL_HOST.
EMAIL_PORT = 587
# Port to use to connect to the SMTP server in EMAIL_HOST.
EMAIL_USE_TLS = True
# It specifies whether to use TLS secure or not.
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# It specifies the default email address to use for ordinary correspondence from the site managers. In our case SERVER
# EMAIL, EMAIL_HOST_USER and DEFAULT_FROM_EMAIL is same, so Django will use "infooveriq@gmail.com" for ordinary
# correspondence as well as for reporting errors.

ADMINS = [
    ('Doloh', 'abdullahbc989@gmail.com'),
]
# It specifies a list of people to send error notifications. When site is in production i.e DEBUG = False and and views
# raises an exception then Django will send an email to all the to all the people specified in the ADMINS list. Each
# item in ADMINS list is a tuple.
# MANAGERS: It specifies a list of people to send broken link emails for 404 NOT FOUND errors. It's accepts emails in
# the same format as ADMINS.

# To enable this feature you have add 'django.middleware.common.BrokenLinkEmailsMiddleware' middleware in the MIDDLEWARE
#  setting in settings.py.
